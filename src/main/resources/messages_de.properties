
user.data.mycerts.headline=Meine Zertifikate
user.data.mycerts.nocerts=Keine Zertifikate gefunden
user.data.myreq.headline=Meine Anfragen
user.data.myreq.noreq=Keine ausstehenden Anfragen
user.data.myreq.rejected=Abgelehnt:
user.data.myreq.accepted=Akzeptiert:

global.welcome.headline=Willkommen zurück
global.info.headline=Info
global.info.description.gencsr=Ein Zertifikat kann nicht einseitig erstellt werden! Als Benutzer kann man zunächst nur einen <strong>Antrag auf ein Zertifikat</strong> stellen - einen sogenannten CSR (Certificate Signing Request)! \
  Dieser muss dann erst noch <strong>von einem Administrator autorisiert werden</strong>. <br/> Durch diesen Vorgang wird dann das Zertifikat erzeugt, dass danach vom Benutzer hier abgeholt werden kann. <br/><br/>\
  Um also ein Zertifikat zu bekommen, muss zuerst auf der lokalen Maschine ein Key und besagter CSR (Certificate Signing Request) erstellt werden. \
  Um das wiederum einfacher zu gestalten, haben wir ein Script erstellt, dass lediglich auf einer Kommandozeile ausgeführt werden muss (benötigt bash und openssl). <br/><br/> \
  <strong>Das Script erstellt KEIN Zertifikat!!! Nur einen ANTRAG auf ein Zertifikat!!!!!</strong> Dieser ist zu nichts anderem nütze, als ihn hier hoch zu laden, um dann ggfs. ein Zertifikat bewilligt zu bekommen \
  - sofern wir uns in unserer unendlichen Großzügigkeit dazu bereit erklären!

global.info.description=Das erzeugte Zertifikat hat ein bestimmtes Format/Typ ("X.509"). Damit kommen nicht alle Applikationen zurecht. Die meisten Browser wollen bspw. das Format "PKCS#12"!<br/> \
  Um aus dem erhaltenen Zertifikat vom Typ "X.509" ein Zertifikat vom Typ "PKCS#12" zu generieren, wird das CA-Zertifikat benötigt. <a href="/intermediate-ca.cert.pem">Dieses kann hier herunter geladen werden.</a><br/> \
  Das PKCS#12-Zertifikat kann mit folgendem Befehl erzeugt werden:
global.info.description.code=openssl pkcs12 -export -out user-cert.pfx -inkey <span class="fsPathText">/path/to/user.key.pem</span> -in <span class="fsPathText">/path/to/user.crt.pem</span> \
   -certfile <span class="fsPathText">/path/to/ca.crt.pem</span>
global.info.description.script.download=Das Script kann hier herunter geladen werden.

global.info.downloads.headline=Downloads
global.info.downloads.cacert=CA Zertifikat
global.info.downloads.gencsr=Clientside Certificate-Key-Generator

global.admin.interface=Admin UI
admin.ui.back=Zurück zur User-Seite
admin.ui.requests.headline=Außstehende Zertifikat-Anfragen
admin.ui.requests.user=Benutzer
admin.ui.requests.date=Datum
admin.ui.requests.created=Erstellt
admin.ui.requests.renewed=Erneuert
admin.ui.requests.filename=Dateiname
admin.ui.requests.actions=Aktionen
admin.ui.requests.nopending=Keine außstehenden Zertifikat-Anfragen
admin.ui.requests.action.reject=Ablehnen
admin.ui.requests.action.sign=Signieren
admin.ui.signed.headline=Signierte Zertifikate
admin.ui.signed.nosigned=Keine signierten Zertifikate
admin.ui.signed.action.revoke=Revoke
admin.ui.signed.action.renew=Erneuern
admin.ui.revoked.headline=Zurück gerufene Zertifikate
admin.ui.revoked.nocerts=Keine zurück gerufenen Zertifikate

user.request.headline=Neue Zertifikats-Anfrage
user.request.description=Wähle wie der Antrag eingereicht werden soll
user.request.via.file.upload=<em>Entweder</em>: CSR-Datei hoch laden
user.request.via.copy.paste=<em>Oder</em>: CSR Inhalt einfügen
user.request.file.upload=Anfrage aus Datei erstellen
user.request.file.invalid=Upload des CSR ist fehlgeschlagen! Ungültige Datei: {0}
user.request.file.error=Upload des CSR ist fehlgeschlagen! Fehlermeldung war: {0}
user.request.file.success=CSR wurde erfolgreich empfangen!
user.request.text.upload=Anfrage aus Text erstellen
user.request.text.invalid=Upload der CSR-Daten ist fehlgeschlagen! Ungültiges CSR-Format!
user.request.text.error=Upload der CSR-Daten ist fehlgeschlagen! Fehlermeldung war: {0}
user.request.text.success=CSR-Daten wurde erfolgreich empfangen!
